
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.5.8
// timestamp : Wed Dec  1 12:18:46 2021 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /media/liww/windows/workspace/simulator/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /media/liww/windows/workspace/simulator/riscv-ctg/sample_cgfs/rv32i_cbo.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the cbo.zero instruction of the RISC-V I extension for the cbo.zero covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32I")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",cbo.zero)

RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1==x2, imm_val == 0x2 
// opcode: cbo.zero ; op1:x2; adj:0x2
TEST_CBO(x1,x2,cbo.zero,0x2,0)

inst_1:
// rs1==x31, imm_val == 0x3 
// opcode: cbo.zero ; op1:x31; adj:0x3
TEST_CBO(x1,x31,cbo.zero,0x3,4)

inst_2:
// rs1==x11, imm_val == 0x4 
// opcode: cbo.zero ; op1:x11; adj:0x4
TEST_CBO(x1,x11,cbo.zero,0x4,8)

inst_3:
// rs1==x14, imm_val == 0x5 
// opcode: cbo.zero ; op1:x14; adj:0x5
TEST_CBO(x1,x14,cbo.zero,0x5,12)

inst_4:
// rs1==x13, imm_val == 0x0 
// opcode: cbo.zero ; op1:x13; adj:0x0
TEST_CBO(x1,x13,cbo.zero,0x0,16)

inst_5:
// rs1==x8, imm_val == 0x7 
// opcode: cbo.zero ; op1:x8; adj:0x7
TEST_CBO(x1,x8,cbo.zero,0x7,20)

inst_6:
// rs1==x6, imm_val == 0x1 
// opcode: cbo.zero ; op1:x6; adj:0x1
TEST_CBO(x1,x6,cbo.zero,0x1,24)

inst_7:
// rs1==x18, imm_val == 0x6 
// opcode: cbo.zero ; op1:x18; adj:0x6
TEST_CBO(x1,x18,cbo.zero,0x6,28)

inst_8:
// rs1==x26, 
// opcode: cbo.zero ; op1:x26; adj:0x0
TEST_CBO(x1,x26,cbo.zero,0x0,32)

inst_9:
// rs1==x3, 
// opcode: cbo.zero ; op1:x3; adj:0x0
TEST_CBO(x1,x3,cbo.zero,0x0,36)

inst_10:
// rs1==x27, 
// opcode: cbo.zero ; op1:x27; adj:0x0
TEST_CBO(x1,x27,cbo.zero,0x0,40)

inst_11:
// rs1==x4, 
// opcode: cbo.zero ; op1:x4; adj:0x0
TEST_CBO(x1,x4,cbo.zero,0x0,44)

inst_12:
// rs1==x17, 
// opcode: cbo.zero ; op1:x17; adj:0x0
TEST_CBO(x1,x17,cbo.zero,0x0,48)

inst_13:
// rs1==x28, 
// opcode: cbo.zero ; op1:x28; adj:0x0
TEST_CBO(x1,x28,cbo.zero,0x0,52)

inst_14:
// rs1==x5, 
// opcode: cbo.zero ; op1:x5; adj:0x0
TEST_CBO(x1,x5,cbo.zero,0x0,56)

inst_15:
// rs1==x15, 
// opcode: cbo.zero ; op1:x15; adj:0x0
TEST_CBO(x1,x15,cbo.zero,0x0,60)

inst_16:
// rs1==x10, 
// opcode: cbo.zero ; op1:x10; adj:0x0
TEST_CBO(x1,x10,cbo.zero,0x0,64)

inst_17:
// rs1==x22, 
// opcode: cbo.zero ; op1:x22; adj:0x0
TEST_CBO(x1,x22,cbo.zero,0x0,68)

inst_18:
// rs1==x12, 
// opcode: cbo.zero ; op1:x12; adj:0x0
TEST_CBO(x1,x12,cbo.zero,0x0,72)

inst_19:
// rs1==x21, 
// opcode: cbo.zero ; op1:x21; adj:0x0
TEST_CBO(x1,x21,cbo.zero,0x0,76)

inst_20:
// rs1==x23, 
// opcode: cbo.zero ; op1:x23; adj:0x0
TEST_CBO(x1,x23,cbo.zero,0x0,80)

inst_21:
// rs1==x19, 
// opcode: cbo.zero ; op1:x19; adj:0x0
TEST_CBO(x1,x19,cbo.zero,0x0,84)

inst_22:
// rs1==x20, 
// opcode: cbo.zero ; op1:x20; adj:0x0
TEST_CBO(x1,x20,cbo.zero,0x0,88)

inst_23:
// rs1==x25, 
// opcode: cbo.zero ; op1:x25; adj:0x0
TEST_CBO(x1,x25,cbo.zero,0x0,92)

inst_24:
// rs1==x30, 
// opcode: cbo.zero ; op1:x30; adj:0x0
TEST_CBO(x1,x30,cbo.zero,0x0,96)

inst_25:
// rs1==x29, 
// opcode: cbo.zero ; op1:x29; adj:0x0
TEST_CBO(x1,x29,cbo.zero,0x0,100)

inst_26:
// rs1==x9, 
// opcode: cbo.zero ; op1:x9; adj:0x0
TEST_CBO(x1,x9,cbo.zero,0x0,104)

inst_27:
// rs1==x24, 
// opcode: cbo.zero ; op1:x24; adj:0x0
TEST_CBO(x1,x24,cbo.zero,0x0,108)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_28:
// rs1==x7, 
// opcode: cbo.zero ; op1:x7; adj:0x0
TEST_CBO(x2,x7,cbo.zero,0x0,0)

inst_29:
// rs1==x1, 
// opcode: cbo.zero ; op1:x1; adj:0x0
TEST_CBO(x2,x1,cbo.zero,0x0,4)

inst_30:
// rs1==x16, 
// opcode: cbo.zero ; op1:x16; adj:0x0
TEST_CBO(x2,x16,cbo.zero,0x0,8)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 56*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 6*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
